function [] = runASM1seqparamSweep(P)
global T_sim folderOutput 

 %% Load model output with baseline parameter
 fResBase = [folderOutput,'resASM1seq_BASE_',num2str(T_sim),'.mat'];
 if ~isfile(fResBase)
   [P,X_c_res_base,~,~] = runASM1seqbaselineParams(P,'baseline');
 else
   load([folderOutput,'resASM1seq_BASE_',num2str(T_sim),'.mat'],'X_c_res_base');
 end
 
 %% Load model output with Chosen set of parameters
 % Note that this is possible because the ParamSweep has already been
 % run, the results have been evaluated, one trajectory is found whose
 % steady state state vector is included within the bounds of
 % acceptability (see below for better explanation on this)
 
 fRes = [folderOutput,'resASM1seq_',num2str(T_sim),'.mat'];
 if ~isfile(fRes)
    P = changeParam(P,1,P.pSweep.parNamesSweep);
    [~,X_c_res,~,~] = runASM1seqForOneParam(1,P); 
 else
    load([folderOutput,'resASM1seq_',num2str(T_sim),'.mat'],'X_c_res');
 end
 
 %% load or produce parameter sweep results
 if ~exist('./outputs/parameter_sweep_ASM1seq/tmp','dir')
     mkdir('./outputs/parameter_sweep_ASM1seq/tmp')
 end
 fname1 = './outputs/parameter_sweep_ASM1seq/tmp/runASM1seqparamSweep_tmp.mat';
 fname2 = './outputs/parameter_sweep_ASM1seq/tmp/AllSweep_ASM1seq.mat';
 if ~(exist(fname1,'file') && exist(fname2,'file')) || P.plotASM1seq
    fname = './outputs/parameter_sweep_ASM1seq/tmp/runASM1seqparamSweep_tmp.mat';
    if ~exist(fname,'file') || P.runASM1seq
        if P.runASM1seq 
            ntp = P.ntpts_ASM1seq;
            if strcmp(P.plot,'both_HET_AUT')
                ntp = 2*ntp;
            end
            for q = 1:P.numberSweepBatches_ASM1seq
                num2str(q)
                [P,results,grNet_AUT_allRuns,X_c_end_allRuns,S_c_end_allRuns] = parallelRuns_ASM1seq(P);
                AllSweep_ASM1seq.(['batch_',qStr]).results = results;
            end
        else
            % load(P.filename_pSweepASM1seq_results_toPlot,'results','X_c_end_allRuns','S_c_end_allRuns')        
            AllSweep_ASM1seq.Runs_acceptance = []; AllSweep_ASM1seq.runIdx=[];startIdx=0;
            AllSweep_ASM1seq.X_c_end_allRuns = []; AllSweep_ASM1seq.S_c_end_allRuns=[];
            for q = 1:P.numberSweepBatches_ASM1seq
                qStr = num2str(q);
                P.filename_pSweepASM1seq_results_toPlot = [P.filename_pSweepASM1seq_results_toPlot_base,qStr];
                AllSweep_ASM1seq.(['batch_',qStr]) = load(P.filename_pSweepASM1seq_results_toPlot,'results','X_c_end_allRuns','S_c_end_allRuns');
                AllSweep_ASM1seq.(['batch_',qStr]).runIdx = (startIdx+1:startIdx+size(AllSweep_ASM1seq.(['batch_',qStr]).results,1))';
                startIdx = AllSweep_ASM1seq.(['batch_',qStr]).runIdx(end);
                filename_pSweepASM1seq_parSets_toPlot = strrep(P.filename_pSweepASM1seq_results_toPlot,'results_','parSets_');
                AllParSetsSweep_ASM1seq.(['batch_',qStr]) = load(filename_pSweepASM1seq_parSets_toPlot,'paramSetsUsed');
            end
        end

        % % Defines regions of acceptability. 
        % These bounds are used to deem a specific parameter set as good to
        % be (later) used in the PBE. These define what a good enough
        % steady state condition looks like (good enough to be coherent
        % with the data and with the experimental knowledge)
        % Because I am starting the parameter sweep with ALL INITIAL
        % conditions within the bounds, but at the steady state I might
        % have that only SOME of the state variables are STILL within those
        % bounds
        % Lower bounds on initial conditions are contained in X_c_lb and S_c_lb
        % Upper bounds on initial conditions are contained in X_c_ub and S_c_ub

        % update the values in P_lb and P_ub based on values in P.EE.table_bounds

        tB = P.pSweep.tableBounds; 

        X_HET_0_lb = P.pSweep.lb_biom_conc*tB.lb('active_biom_in_gCOD')*tB.lb('gHET_in_total')*tB.lb('gCOD_in_gVSS')*tB.lb('gVSS_in_gMLSS'); % Active heterotrophic biomass, Xb,h
        % Impo! I have to take gHET_in_total from P_ub as gAUT_in_total = 1-gHET_in_total
        X_AUT_0_lb = P.pSweep.lb_biom_conc*tB.lb('active_biom_in_gCOD')*(1-tB.ub('gHET_in_total'))*tB.lb('gCOD_in_gVSS')*tB.lb('gVSS_in_gMLSS'); %22; %Active autotrophic biomass, Xb,a

        X_HET_0_ub = P.pSweep.ub_biom_conc*tB.ub('active_biom_in_gCOD')*tB.ub('gHET_in_total')*tB.ub('gCOD_in_gVSS')*tB.ub('gVSS_in_gMLSS'); % Active heterotrophic biomass, Xb,h
        % Impo! I have to take gHET_in_total from P_lb as gAUT_in_total = 1-gHET_in_total
        X_AUT_0_ub = P.pSweep.ub_biom_conc*tB.ub('active_biom_in_gCOD')*(1-tB.lb('gHET_in_total'))*tB.ub('gCOD_in_gVSS')*tB.ub('gVSS_in_gMLSS'); %22; %Active autotrophic biomass, Xb,a

        save('./outputs/parameter_sweep_ASM1seq/tmp/runASM1seqparamSweep_tmp.mat','-v7.3')
    else
        load('./outputs/parameter_sweep_ASM1seq/tmp/runASM1seqparamSweep_tmp.mat')
    end

    %% Plotting sweep trajectories and computing the acceptance scores
    for q = 1:P.numberSweepBatches_ASM1seq
        qStr = num2str(q);
        [P,AllSweep_ASM1seq] = plotOneBatch_pSweep_ASM1seq(P,AllSweep_ASM1seq,qStr,X_HET_0_lb,X_HET_0_ub,X_AUT_0_lb,X_AUT_0_ub,X_c_res_base,X_c_res);
    end

    save('./outputs/parameter_sweep_ASM1seq/tmp/AllSweep_ASM1seq.mat','AllSweep_ASM1seq','-v7.3')
 else
    load(fname1)
    load(fname2,'AllSweep_ASM1seq')
 end
 %% Create the global rankings: identifying the 20 best parameter sets
 
 rowsToRemove = find(AllSweep_ASM1seq.Runs_acceptance.Ranking==0);
 AllSweep_ASM1seq.Runs_acceptance(rowsToRemove,:) = [];
 AllSweep_ASM1seq.runIdx(rowsToRemove,:) = [];
 AllSweep_ASM1seq.X_c_end_allRuns(rowsToRemove,:) = [];
 AllSweep_ASM1seq.S_c_end_allRuns(rowsToRemove,:) = [];
 
 % the bounds
 [~,idx] = sort(AllSweep_ASM1seq.Runs_acceptance.distance_SS_to_IS);
 ranking = zeros(size(idx));
 ranking(idx) = (1:length(idx));
 AllSweep_ASM1seq.Runs_acceptance.Ranking = ranking;
 [~,idxSorted] = sort(AllSweep_ASM1seq.Runs_acceptance.Ranking);
 AllSweep_ASM1seq.Runs_acceptance = AllSweep_ASM1seq.Runs_acceptance(idxSorted,:);
 AllSweep_ASM1seq.runIdx = AllSweep_ASM1seq.runIdx(idxSorted,:);
 AllSweep_ASM1seq.X_c_end_allRuns = AllSweep_ASM1seq.X_c_end_allRuns(idxSorted,:);
 AllSweep_ASM1seq.S_c_end_allRuns = AllSweep_ASM1seq.S_c_end_allRuns(idxSorted,:);

 %idxBestKparSweeps = AllSweep_ASM1seq.Runs_acceptance.runIdx(1:P.nBestKparSweeps);
 
 bestSweep_ASM1seq.Runs_acceptance = AllSweep_ASM1seq.Runs_acceptance;
 bestSweep_ASM1seq.results = [];bestSweep_ASM1seq.X_c_end_allRuns=[];bestSweep_ASM1seq.S_c_end_allRuns=[];bestSweep_ASM1seq.runIdx=[];bestSweep_AS1seq.parSets=[];
 for kk = 1:size(AllSweep_ASM1seq.Runs_acceptance,1)
    aRunIdx = AllSweep_ASM1seq.runIdx(kk);
    nBatch = floor(aRunIdx./P.batchSizeSweep);
    nRunInThisBatch = mod(aRunIdx, P.batchSizeSweep);
    
    if nRunInThisBatch>0
        nBatch = nBatch+1;
    else
        nRunInThisBatch = P.batchSizeSweep; % E' l'ultima run del batch
    end
    
    qStr = num2str(nBatch);
    bestSweep_ASM1seq.results = [bestSweep_ASM1seq.results;  AllSweep_ASM1seq.(['batch_',qStr]).results(nRunInThisBatch,:)];
   
    % Verify that X_c_end is the same
    if ~reallyEqual(AllSweep_ASM1seq.X_c_end_allRuns(kk,:),AllSweep_ASM1seq.(['batch_',qStr]).X_c_end_allRuns(nRunInThisBatch,:))
        error('should be the same, check')
    end
    if ~reallyEqual(AllSweep_ASM1seq.S_c_end_allRuns(kk,:),AllSweep_ASM1seq.(['batch_',qStr]).S_c_end_allRuns(nRunInThisBatch,:))
        error('should be the same, check')
    end
    
    bestSweep_ASM1seq.X_c_end_allRuns = [bestSweep_ASM1seq.X_c_end_allRuns;  AllSweep_ASM1seq.(['batch_',qStr]).X_c_end_allRuns(nRunInThisBatch,:)];
    bestSweep_ASM1seq.S_c_end_allRuns = [bestSweep_ASM1seq.S_c_end_allRuns;  AllSweep_ASM1seq.(['batch_',qStr]).S_c_end_allRuns(nRunInThisBatch,:)];
    bestSweep_ASM1seq.runIdx = [bestSweep_ASM1seq.runIdx; AllSweep_ASM1seq.(['batch_',qStr]).runIdx(nRunInThisBatch,:)];
    bestSweep_ASM1seq.parSets = [bestSweep_ASM1seq.parSets; AllParSetsSweep_ASM1seq.(['batch_',qStr]).paramSetsUsed(nRunInThisBatch,:)];       
 end
 
 save('./outputs/parameter_sweep_ASM1seq/bestSweep_ASM1seq.mat','bestSweep_ASM1seq','-v7.3') 
return



